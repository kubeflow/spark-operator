name: Release

on:
  push:
    branches:
      - release-*
    paths:
      - VERSION

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SEMVER_PATTERN: '^v([0-9]+)\.([0-9]+)\.([0-9]+)(-rc\.([0-9]+))?$'
  IMAGE_REGISTRY: docker.io
  IMAGE_REPOSITORY: kubeflow/spark-operator

jobs:
  check-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check whether version matches semver pattern
        run: |
          VERSION=$(cat VERSION)
          if [[ ${VERSION} =~ ${{ env.SEMVER_PATTERN }} ]]; then
            echo "Version '${VERSION}' matches semver pattern."
          else
            echo "Version '${VERSION}' does not match semver pattern."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check whether chart version and appVersion matches version
        run: |
          VERSION=${VERSION#v}
          CHART_VERSION=$(cat charts/spark-operator-chart/Chart.yaml | grep version | awk '{print $2}')
          CHART_APP_VERSION=$(cat charts/spark-operator-chart/Chart.yaml | grep appVersion | awk '{print $2}')
          if [[ ${CHART_VERSION} == ${VERSION} ]]; then
            echo "Chart version '${CHART_VERSION}' matches version '${VERSION}'."
          else
            echo "Chart version '${CHART_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi
          if [[ ${CHART_APP_VERSION} == ${VERSION} ]]; then
            echo "Chart appVersion '${CHART_APP_VERSION}' matches version '${VERSION}'."
          else
            echo "Chart appVersion '${CHART_APP_VERSION}' does not match version '${VERSION}'."
            exit 1
          fi

      - name: Check if tag exists
        run: |
          git fetch --tags
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "Tag '${VERSION}' already exists."
            exit 1
          else
            echo "Tag '${VERSION}' does not exist."
          fi

  release_sparkctl:
    needs:
      - check-release

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        os:
          - linux
          - darwin
        arch:
          - amd64
          - arm64

    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION | sed "s/^v//")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build sparkctl binary
        run: |
          make build-sparkctl
          tar -czvf sparkctl-${VERSION}-${GOOS}-${GOARCH}.tgz -C bin sparkctl

      - name: Upload sparkctl binary
        uses: actions/upload-artifact@v4
        with:
          name: sparkctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}
          path: sparkctl-${{ env.VERSION }}-${{ env.GOOS }}-${{ env.GOARCH }}.tgz
          if-no-files-found: error
          retention-days: 1

  build_images:
    needs:
      - release_sparkctl

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  release_images:
    needs:
      - build_images

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:${{ steps.meta.outputs.version }}

  push_tag:
    needs:
      - release_images

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git tag -a "${VERSION}" -m "Spark Operator Official Release ${VERSION}"
          git push origin "${VERSION}"

  draft_release:
    needs:
      - push_tag

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read version from VERSION file
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      - name: Package Helm charts
        run: |
          for chart in $(ls charts); do
            helm package charts/${chart}
          done

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sparkctl-*

      - name: Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Spark Operator ${{ env.VERSION }}"
          tag_name: ${{ env.VERSION }}
          prerelease: ${{ contains(env.VERSION, 'rc') }}
          target_commitish: ${{ github.sha }}
          draft: true
          files: |
            *.tgz
            sparkctl-*/sparkctl-*.tgz
